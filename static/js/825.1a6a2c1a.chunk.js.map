{"version":3,"file":"static/js/825.1a6a2c1a.chunk.js","mappings":"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","sources":["components/Contact.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\n\n// Connect to the Socket.IO server\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\nconst socket = io(`${backendUrl}`, {\n  transports: ['websocket']\n});\n\nconst Contact: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setStatus(null); // Reset status message\n\n    if (!formData.name || !formData.email || !formData.message) {\n      setStatus('All fields are required.');\n      setIsLoading(false);\n      return;\n    }\n\n    if (!validateEmail(formData.email)) {\n      setStatus('Please enter a valid email address.');\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.message.length > 1000) {\n      setStatus('Message is too long (max 1000 characters).');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(`${backendUrl}/api/contact`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        setStatus('Message sent successfully!');\n        setSubmitted(true);\n        setFormData({ name: '', email: '', message: '' });\n      } else {\n        setStatus('Something went wrong. Please try again later.');\n      }\n    } catch (error) {\n      setStatus('Network error. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n\n    // Emit the message to the server via Socket.IO\n    socket.emit('send_message', formData);\n  };\n\n  useEffect(() => {\n    // Listen for success or error messages from the server\n    socket.on('form_success', (message: string) => {\n      setStatus(message); // Ensure this doesn't overwrite fetch logic\n      setSubmitted(true);\n      setFormData({ name: '', email: '', message: '' }); // Reset the form\n    });\n\n    socket.on('form_error', (error: string) => {\n      setStatus(error);\n    });\n\n    return () => {\n      // Clean up Socket.IO listeners when the component unmounts\n      socket.off('form_success');\n      socket.off('form_error');\n    };\n  }, []);\n\n  const handleModalClose = () => {\n    setSubmitted(false);\n    setStatus(null);\n  };\n\n  return (\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\n      <div className=\"bg-white p-8 rounded-lg shadow-lg w-full max-w-md\">\n        <h1 className=\"text-2xl font-semibold mb-6 text-gray-800\">\n          Contact Me\n        </h1>\n        {submitted ? (\n          // Modal Window for Success Message\n          <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg w-96\">\n              <h2 className=\"text-xl font-semibold text-green-600 mb-4\">\n                {status || 'Message sent successfully!'}\n              </h2>\n              <button\n                onClick={handleModalClose}\n                className=\"w-full bg-blue-500 text-white font-semibold py-2 px-4 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label\n                htmlFor=\"name\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Name\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleInputChange}\n                required\n                placeholder=\"Enter your name\"\n                className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Email\n              </label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n                placeholder=\"Enter your email\"\n                className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                htmlFor=\"message\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Message\n              </label>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                value={formData.message}\n                onChange={handleInputChange}\n                required\n                placeholder=\"Write your message here\"\n                rows={4}\n                className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n              ></textarea>\n            </div>\n            <button\n              type=\"submit\"\n              className=\"w-full bg-blue-500 text-white font-semibold py-2 px-4 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Sending...' : 'Send Message'}\n            </button>\n          </form>\n        )}\n        {status && !submitted && (\n          <p className=\"mt-4 text-center text-sm text-red-600\">{status}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;\n\n// import React, { useState, useEffect } from 'react';\n// import { io } from 'socket.io-client';\n\n// // Connect to the Socket.IO server\n// // const socket = io('http://localhost:5000'); // Replace with your backend's URL in production\n// const backendUrl = process.env.REACT_APP_BACKEND_URL;\n\n// const socket = io(`${backendUrl}`, {\n//   transports: ['websocket']\n// });\n\n// console.log('Backend URL:', backendUrl);\n\n// // const socket = io('https://personal-portfolio-1ode.onrender.com');\n\n// const Contact: React.FC = () => {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     message: ''\n//   });\n\n//   const [submitted, setSubmitted] = useState(false);\n//   const [status, setStatus] = useState<string | null>(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n//   ) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const validateEmail = (email: string) => {\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     return emailRegex.test(email);\n//   };\n\n//   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n//     setStatus(null); // Reset status message\n//     if (!formData.name || !formData.email || !formData.message) {\n//       setStatus('All fields are required.');\n//       setIsLoading(false);\n//       return;\n//     }\n\n//     if (!validateEmail(formData.email)) {\n//       setStatus('Please enter a valid email address.');\n//       setIsLoading(false);\n//       return;\n//     }\n\n//     if (formData.message.length > 1000) {\n//       setStatus('Message is too long (max 1000 characters).');\n//       setIsLoading(false);\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${backendUrl}/api/contact`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(formData)\n//       });\n\n//       if (response.ok) {\n//         setStatus('Message sent successfully!');\n//         setSubmitted(true);\n//         setFormData({ name: '', email: '', message: '' });\n//       } else {\n//         setStatus('Something went wrong. Please try again later.');\n//       }\n//     } catch (error) {\n//       setStatus('Network error. Please try again later.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n\n//     // Emit the message to the server via Socket.IO\n//     socket.emit('send_message', formData);\n//   };\n\n//   useEffect(() => {\n//     // Listen for success or error messages from the server\n//     socket.on('form_success', (message: string) => {\n//       setStatus(message); // Ensure this doesn't overwrite fetch logic\n//       setSubmitted(true);\n//       setFormData({ name: '', email: '', message: '' }); // Reset the form\n//     });\n\n//     socket.on('form_error', (error: string) => {\n//       setStatus(error);\n//     });\n\n//     return () => {\n//       // Clean up Socket.IO listeners when the component unmounts\n//       socket.off('form_success');\n//       socket.off('form_error');\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\n//       <div className=\"bg-white p-8 rounded-lg shadow-lg w-full max-w-md\">\n//         <h1 className=\"text-2xl font-semibold mb-6 text-gray-800\">\n//           Contact Me\n//         </h1>\n//         {submitted ? (\n//           <div className=\"text-center\">\n//             <p className=\"text-green-600 font-medium\">\n//               {status || 'Thank you for your message!'}\n//             </p>\n//           </div>\n//         ) : (\n//           <form onSubmit={handleSubmit} className=\"space-y-6\">\n//             <div>\n//               <label\n//                 htmlFor=\"name\"\n//                 className=\"block text-sm font-medium text-gray-700\"\n//               >\n//                 Name\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 id=\"name\"\n//                 name=\"name\"\n//                 value={formData.name}\n//                 onChange={handleInputChange}\n//                 required\n//                 placeholder=\"Enter your name\"\n//                 className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n//               />\n//             </div>\n//             <div>\n//               <label\n//                 htmlFor=\"email\"\n//                 className=\"block text-sm font-medium text-gray-700\"\n//               >\n//                 Email\n//               </label>\n//               <input\n//                 type=\"email\"\n//                 id=\"email\"\n//                 name=\"email\"\n//                 value={formData.email}\n//                 onChange={handleInputChange}\n//                 required\n//                 placeholder=\"Enter your email\"\n//                 className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n//               />\n//             </div>\n//             <div>\n//               <label\n//                 htmlFor=\"message\"\n//                 className=\"block text-sm font-medium text-gray-700\"\n//               >\n//                 Message\n//               </label>\n//               <textarea\n//                 id=\"message\"\n//                 name=\"message\"\n//                 value={formData.message}\n//                 onChange={handleInputChange}\n//                 required\n//                 placeholder=\"Write your message here\"\n//                 rows={4}\n//                 className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n//               ></textarea>\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"w-full bg-blue-500 text-white font-semibold py-2 px-4 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n//               disabled={isLoading}\n//             >\n//               {isLoading ? 'Sending...' : 'Send Message'}\n//             </button>\n//           </form>\n//         )}\n//         {status && (\n//           <p className=\"mt-4 text-center text-sm text-red-600\">{status}</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Contact;\n"],"names":["backendUrl","process","socket","io","concat","transports","Contact","formData","setFormData","useState","name","email","message","submitted","setSubmitted","status","setStatus","isLoading","setIsLoading","handleInputChange","e","value","target","_objectSpread","useEffect","on","error","off","_jsx","className","children","_jsxs","onClick","handleModalClose","onSubmit","async","preventDefault","test","length","fetch","method","headers","body","JSON","stringify","ok","emit","htmlFor","type","id","onChange","required","placeholder","rows","disabled"],"sourceRoot":""}